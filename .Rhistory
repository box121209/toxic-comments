arr.num
prob <- as.numeric(zip.rf$test$votes[i,j])
prob
idx <- ceiling(prob/meshsize)
zip.rf$test$predicted[i]
j
arr.num <- rep(0, len) # counts correct predictions
arr.den <- rep(0, len) # counts all predictions
for(i in 1:nrow(zip.test)){
for(j in 1:10){
prob <- as.numeric(zip.rf$test$votes[i,j])
idx <- ceiling(prob/meshsize)
arr.den[idx] <- arr.den[idx] + 1
if(zip.rf$test$predicted[i] == j-1) arr.num[idx] <- arr.num[idx] + 1
}
}
calib <- arr.num/arr.den
plot(calib)
xax <- 1:len / meshsize
xax
xax <- (1:len) / len
plot(calib ~ xax, type='b', col='blue', frame.plot=0)
plot(calib ~ xax,
xlab="Probability estimate",
ylab="Observed probability",
type='b', col='blue', frame.plot=0)
generate.data <- function(n, sigma1, sigma2, prob){
y <- factor(sample(2, n, prob=c(prob, 1-prob), replace=TRUE))
f <- function(z){ if(z==1) rnorm(1, mu1, sigma1) else rnorm(1, mu2, sigma2)}
x <- sapply(y, f)
#y1 <- factor(as.integer(y==1))
#y2 <- factor(as.integer(y==2))
data.frame(x, y)
}
generate.roc <- function(dat.train, dat.test, nbins=100){
# fit model:
model <- glm(y ~ ., family=binomial(link='logit'), data=dat.train)
pred <- predict(model, newdata=dat.test)
# ROC curve:
mn <- min(pred)
mx <- max(pred)
thresh <- seq(mn, mx, (mx-mn)/nbins)
f <- function(theta){
pred <- (pred<theta)
tp <- (dat.test$y==1)
tpr <- sum(pred[tp])/length(pred[tp])
tn <- (dat.test$y==2)
fpr <- sum(pred[tn])/length(pred[tn])
list(fpr=fpr, tpr=tpr)
}
roc <- t(sapply(thresh, f))
# return:
list(pred=pred, roc=roc)
}
generate.roc.set <- function(nexpts, dat.train, dat.test, nbins=100){
out <- matrix(ncol=3, nrow=0)
for(i in 1:nexpts){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
roc <- generate.roc(dat.train, dat.test, nbins=nbins)$roc
roc <- cbind(roc, rep(i, nrow(roc)))
out <- rbind(out, roc)
}
# return:
fpr <- do.call(c, out[,1])
tpr <- do.call(c, out[,2])
idx <- do.call(c, out[,3])
data.frame(fpr, tpr, idx)
}
addTrans <- function(color,trans)
{
# This function adds transparancy to a color.
# Define transparancy with an integer between 0 and 255
# 0 being fully transparant and 255 being fully visable
# Works with either color and trans a vector of equal length,
# or one of the two of length 1.
if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))
num2hex <- function(x)
{
hex <- unlist(strsplit("0123456789ABCDEF",split=""))
return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))
}
rgb <- rbind(col2rgb(color),trans)
res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
return(res)
}
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1.2
prob <- 0.2
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(1:nbins)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:nbins)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1)/nbins,
boxwex=1/(nbins+10),
add=TRUE)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1
prob <- 0.3
n.train <- 300
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
plot(model$roc, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
for(i in 1:100){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
model <- generate.roc(dat.train, dat.test)
#table(model$pred, dat.test$y)
points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1
sigma2 <- 1.2
prob <- 0.3
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
plot(model$roc, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
for(i in 1:100){
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
model <- generate.roc(dat.train, dat.test)
#table(model$pred, dat.test$y)
points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 30
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
resolution <- 30
nsamples <- 100
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
mu1 <- -1
mu2 <- 1
sigma1 <- 1.2
sigma2 <- 1.5
prob <- 0.3
n.train <- 100
n.test <- 300
dat.train <- generate.data(n.train, sigma1, sigma2, prob)
dat.test <- generate.data(n.test, sigma1, sigma2, prob)
#plot(model$roc, type='n', frame.plot=0,
#     xlab="False positive rate",
#     ylab="True positive rate")
#segments(0,0,1,1, col='grey')
#for(i in 1:100){
#  dat.train <- generate.data(n.train, sigma1, sigma2, prob)
#  dat.test <- generate.data(n.test, sigma1, sigma2, prob)
#  table(model$pred, dat.test$y)
#  model <- generate.roc(dat.train, dat.test)
#  points(model$roc, type='l', lwd=2, col=addTrans('blue', 40))
#}
# alternatively:
dat <- generate.roc.set(100, dat.train, dat.test)
resolution <- 30
nsamples <- 40
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
resolution <- 30
nsamples <- 100
plot(dat$fpr, dat$tpr, type='n', frame.plot=0,
xlab="False positive rate",
ylab="True positive rate")
segments(0,0,1,1, col='grey')
#points(dat[,1:2], col=addTrans('blue', 60), cex=0.5)
expt <- sample(dat$idx, nsamples)
for(i in expt){
points(dat[dat$idx==i,1:2], col=addTrans('blue', 100), lwd=1, type='l')
}
bins <- unique(floor(resolution*dat$fpr))
nbins <- length(bins)
boxplot(dat$tpr ~ floor(resolution*dat$fpr),
col='white',
axes=FALSE,
at=(0:(nbins-1))/nbins,
boxwex=1/(nbins+10),
add=TRUE)
762.41 - 30 - 25.07 - 32.04
pi
4*pi * 1737/3
v = 4*pi * 1737/3
v = 4*pi * 1737^3 /3
a = 4*pi ^ 6371^2
v
a
a = 4*pi * 6371^2
a
v/a
v/a / 1.60934
shiny::runApp('Blog/aws/201512nfgraph/nfgraph')
install.packages("vcd")
runApp('Blog/aws/201512nfgraph/nfgraph')
install.packages("shape")
runApp('Blog/aws/201512nfgraph/nfgraph')
shiny::runApp('Projects/201801 wikiwords/wikiwords')
shiny::runApp('Blog/aws/201512nfgraph/nfgraph')
setwd("~/Kaggle/toxic_comments/toxic_comment_analysis")
args <- c("./data", "./shiny/wordrep")
inpath <- args[1]
outpath <- args[2]
HOMEPATH <- "/Users/bill/Projects/201801-wikiwords/wikiwords"
source(sprintf("%s/tda_functions.R", HOMEPATH))
cat("Checking for output directory...\n")
tmp <- ifelse(!dir.exists(file.path(args[2])),
dir.create(file.path(args[2])),
FALSE)
tmp <- ifelse(!dir.exists(file.path(sprintf("%s/data", args[2]))),
dir.create(file.path(sprintf("%s/data", args[2]))),
FALSE)
cat("Reading data...\n")
dictfile <- sprintf("%s/wdict.txt", args[1])
freqfile <- sprintf("%s/wcounts.txt", args[1])
vecfile <- sprintf("%s/wvectors.txt", args[1])
dat1 <- read.table(dictfile)
names(dat1) <- c("word", "class")
dat2 <- read.table(freqfile, row.names=NULL)
names(dat2) <- c("freq", "word")
dat2$freq <- as.numeric(dat2$freq)
dat3 <- read.table(vecfile)
names(dat3)[1] <- "word"
dat4 <- merge(dat1, dat2)
alldat <- merge(dat3, dat4)
attach(alldat)
cat("Fitting frequency distribution...\n")
tab <- table(freq)
xx <- as.numeric(dimnames(tab)$freq)
yy <- as.numeric(tab)
imgfile <- sprintf("%s/word_frequency_distribution.pdf", args[2])
pdf(imgfile)
plot(yy ~ xx, log='xy', col='blue', cex=0.5, frame.plot=0,
xlab="Word count", ylab="Nr words")
cond <- (xx < 2e03)
model <- lm(log(yy[cond]) ~ log(xx[cond]))
( coef <- model$coefficients )
f <- function(x) exp(coef[1] + coef[2]*log(x))
xxx <- exp(0:10)
yyy <- sapply(xxx, f)
points( yyy~xxx, type='l', col='red', lwd=2)
text(2e03, 1000,
labels=sprintf("Power law coefficients (%g, %g)", coef[1], coef[2]), col='red')
dev.off()
cat(sprintf("Plot written to %s/word_frequency_distribution.pdf\n", args[2]))
nbins <- 20                 # PARAMETER for mapper construction
coarseness <- 32            # PARAMETER target average cluster size
bins <- makebins(nbins, coef)
cat(sprintf("Building clusters (using %d bins and average cluster size %d)...\n",
nbins, coarseness))
cluster.set <- makeclusters_centroids(bins, coarseness)
cluster.set <- list()
ccount <- 0
recurse.func <- function(hc, bin.nr, ccount){
for(child in 1:2){
set <- unique(as.numeric(labels(hc[[child]])))
if(length(set) < coarseness){
# update global variables:
ccount <- ccount + 1
centroid <- colSums( alldat[set, 2:201] )/length(set)
cluster.set[[ccount]] <<- list(cluster=set, centroid=centroid, height=bin.nr)
cat(sprintf("%d %d       \r", length(set), ccount))
} else {
ccount <- recurse.func( hc[[child]], bin.nr, ccount )
}
}
return(ccount)
}
nbins <- length(bins)
bin <- bins[[nr]]
nr = 1
bin <- bins[[nr]]
cat(sprintf("Bin %d                           \n", nr))
bindist <- dist(alldat[bin, 2:201], method="euclidean")
ncol(alldat)
ncol(dat3)
for(nr in 1:nbins){
bin <- bins[[nr]]
cat(sprintf("Bin %d                           \n", nr))
bindist <- dist(alldat[bin, 2:ncol(dat3)], method="euclidean")
hc <- as.dendrogram( hclust(bindist) )
ccount <- recurse.func(hc, nr, ccount)
cat("\r")
}
cluster.set <- makeclusters_centroids(bins, coarseness)
source(sprintf("%s/tda_functions.R", HOMEPATH))
cluster.set <- makeclusters_centroids(bins, coarseness)
options
options(expressions=100)
options(expressions=1000)
cluster.set <- makeclusters_centroids(bins, coarseness)
options(expressions=100)
cluster.set <- makeclusters_centroids(bins, coarseness)
nr =1
bin <- bins[[nr]]
cat(sprintf("Bin %d                           \n", nr))
bindist <- dist(alldat[bin, 2:nc], method="euclidean")
nc <- ncol(dat3)
bindist <- dist(alldat[bin, 2:nc], method="euclidean")
bin
length(bin)
bins <- makebins(nbins, coef)
bins
cluster.set <- list()
ccount <- 0
nc <- ncol(dat3)
recurse.func <- function(hc, bin.nr, ccount){
for(child in 1:2){
set <- unique(as.numeric(labels(hc[[child]])))
if(length(set) < coarseness){
# update global variables:
ccount <- ccount + 1
centroid <- colSums( alldat[set, 2:nc] )/length(set)
cluster.set[[ccount]] <<- list(cluster=set, centroid=centroid, height=bin.nr)
cat(sprintf("%d %d       \r", length(set), ccount))
} else {
ccount <- recurse.func( hc[[child]], bin.nr, ccount )
}
}
return(ccount)
}
nbins <- length(bins)
nbins
nr = 1
bin <- bins[[nr]]
bin
length(bin)
bindist <- dist(alldat[bin, 2:nc], method="euclidean")
hc <- as.dendrogram( hclust(bindist) )
ccount
child = 1
set <- unique(as.numeric(labels(hc[[child]])))
length(set) < coarseness
ccount <- ccount + 1
centroid <- colSums( alldat[set, 2:nc] )/length(set)
cluster.set[[ccount]] <<- list(cluster=set, centroid=centroid, height=bin.nr)
bin.nr = nr
ccount <- recurse.func( hc[[child]], bin.nr, ccount )
cluster.set[[ccount]] <<- list(cluster=set, centroid=centroid, height=bin.nr)
cluster.set <- list()
ccount <- 0
nc <- ncol(dat3)
ccount <- ccount + 1
centroid <- colSums( alldat[set, 2:nc] )/length(set)
cluster.set[[ccount]] <<- list(cluster=set, centroid=centroid, height=bin.nr)
cluster.set <- list()
cluster.set
nbins <- 30                 # PARAMETER for mapper construction
cluster.set <- makeclusters_centroids(bins, coarseness)
bins <- makebins(nbins, coef)
cluster.set <- makeclusters_centroids(bins, coarseness)
plot(yy ~ xx, log='xy', col='blue', cex=0.5, frame.plot=0,
xlab="Word count", ylab="Nr words")
# fit power law:
cond <- (xx < 2e03)
model <- lm(log(yy[cond]) ~ log(xx[cond]))
( coef <- model$coefficients )
f <- function(x) exp(coef[1] + coef[2]*log(x))
xxx <- exp(0:10)
yyy <- sapply(xxx, f)
points( yyy~xxx, type='l', col='red', lwd=2)
text(2e03, 1000,
labels=sprintf("Power law coefficients (%g, %g)", coef[1], coef[2]), col='red')
bins
sapply(bins, length)
